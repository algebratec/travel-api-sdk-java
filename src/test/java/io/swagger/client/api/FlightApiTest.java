/*
 * Algebratec API
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AlgebratecResponse;
import io.swagger.client.model.FlightAirportAutocompleteResponse;
import io.swagger.client.model.FlightAvailabilityRequest;
import io.swagger.client.model.FlightAvailabilityResponse;
import io.swagger.client.model.FlightBookingKeyRequest;
import io.swagger.client.model.FlightBookingResponse;
import io.swagger.client.model.FlightConfirmationRequest;
import io.swagger.client.model.FlightFareResponse;
import io.swagger.client.model.FlightFareRulesResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlightApi
 */
@Ignore
public class FlightApiTest {

    private final FlightApi api = new FlightApi();

    /**
     * airRevalidate service to check if flight is still bookable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightAirRevalidateTest() throws ApiException {
        FlightBookingKeyRequest body = null;
        FlightFareResponse response = api.flightAirRevalidate(body);

        // TODO: test validations
    }
    /**
     * airport autocomplete service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightAirportAutocompleteTest() throws ApiException {
        String term = null;
        FlightAirportAutocompleteResponse response = api.flightAirportAutocomplete(term);

        // TODO: test validations
    }
    /**
     * flight availability service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightAvailabilityTest() throws ApiException {
        FlightAvailabilityRequest body = null;
        FlightAvailabilityResponse response = api.flightAvailability(body);

        // TODO: test validations
    }
    /**
     * confirm flight booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightBookingConfirmaitonTest() throws ApiException {
        FlightConfirmationRequest body = null;
        FlightBookingResponse response = api.flightBookingConfirmaiton(body);

        // TODO: test validations
    }
    /**
     * flight fare service, this service provide the airline fare rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightFareTest() throws ApiException {
        FlightBookingKeyRequest body = null;
        FlightFareRulesResponse response = api.flightFare(body);

        // TODO: test validations
    }
    /**
     * confirm on hold flight booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightOnHoldBookingConfirmationTest() throws ApiException {
        String bookingId = null;
        FlightBookingResponse response = api.flightOnHoldBookingConfirmation(bookingId);

        // TODO: test validations
    }
    /**
     * Refresh flight booking using booking id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightRefreshPNRTest() throws ApiException {
        String bookingId = null;
        FlightBookingResponse response = api.flightRefreshPNR(bookingId);

        // TODO: test validations
    }
    /**
     * retrieve PNR using PNR record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightRetrievePNRTest() throws ApiException {
        String recordLocator = null;
        FlightBookingResponse response = api.flightRetrievePNR(recordLocator);

        // TODO: test validations
    }
    /**
     * void PNR service, this service should be used in non BSP market to cancel the PNR before midnight
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightVoidPNRTest() throws ApiException {
        String bookingId = null;
        FlightBookingResponse response = api.flightVoidPNR(bookingId);

        // TODO: test validations
    }
}
