/*
 * Algebratec API
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HotelConfirmationRequestHolder;
import io.swagger.client.model.HotelConfirmationRequestPayment;
import io.swagger.client.model.HotelConfirmationRequestRooms;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * HotelConfirmationRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-25T11:48:12.193Z[GMT]")
public class HotelConfirmationRequest {
  /**
   * Gets or Sets language
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN("EN"),
    FR("FR"),
    AR("AR");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LanguageEnum fromValue(String text) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LanguageEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("language")
  private LanguageEnum language = null;

  @SerializedName("arrivalTime")
  private String arrivalTime = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("holder")
  private HotelConfirmationRequestHolder holder = null;

  @SerializedName("payment")
  private HotelConfirmationRequestPayment payment = null;

  @SerializedName("rooms")
  private List<HotelConfirmationRequestRooms> rooms = null;

  @SerializedName("extras")
  private List<Integer> extras = null;

  public HotelConfirmationRequest language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public HotelConfirmationRequest arrivalTime(String arrivalTime) {
    this.arrivalTime = arrivalTime;
    return this;
  }

   /**
   * Get arrivalTime
   * @return arrivalTime
  **/
  @Schema(example = "14:35", description = "")
  public String getArrivalTime() {
    return arrivalTime;
  }

  public void setArrivalTime(String arrivalTime) {
    this.arrivalTime = arrivalTime;
  }

  public HotelConfirmationRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public HotelConfirmationRequest holder(HotelConfirmationRequestHolder holder) {
    this.holder = holder;
    return this;
  }

   /**
   * Get holder
   * @return holder
  **/
  @Schema(description = "")
  public HotelConfirmationRequestHolder getHolder() {
    return holder;
  }

  public void setHolder(HotelConfirmationRequestHolder holder) {
    this.holder = holder;
  }

  public HotelConfirmationRequest payment(HotelConfirmationRequestPayment payment) {
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @Schema(description = "")
  public HotelConfirmationRequestPayment getPayment() {
    return payment;
  }

  public void setPayment(HotelConfirmationRequestPayment payment) {
    this.payment = payment;
  }

  public HotelConfirmationRequest rooms(List<HotelConfirmationRequestRooms> rooms) {
    this.rooms = rooms;
    return this;
  }

  public HotelConfirmationRequest addRoomsItem(HotelConfirmationRequestRooms roomsItem) {
    if (this.rooms == null) {
      this.rooms = new ArrayList<HotelConfirmationRequestRooms>();
    }
    this.rooms.add(roomsItem);
    return this;
  }

   /**
   * Get rooms
   * @return rooms
  **/
  @Schema(description = "")
  public List<HotelConfirmationRequestRooms> getRooms() {
    return rooms;
  }

  public void setRooms(List<HotelConfirmationRequestRooms> rooms) {
    this.rooms = rooms;
  }

  public HotelConfirmationRequest extras(List<Integer> extras) {
    this.extras = extras;
    return this;
  }

  public HotelConfirmationRequest addExtrasItem(Integer extrasItem) {
    if (this.extras == null) {
      this.extras = new ArrayList<Integer>();
    }
    this.extras.add(extrasItem);
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @Schema(description = "")
  public List<Integer> getExtras() {
    return extras;
  }

  public void setExtras(List<Integer> extras) {
    this.extras = extras;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelConfirmationRequest hotelConfirmationRequest = (HotelConfirmationRequest) o;
    return Objects.equals(this.language, hotelConfirmationRequest.language) &&
        Objects.equals(this.arrivalTime, hotelConfirmationRequest.arrivalTime) &&
        Objects.equals(this.comment, hotelConfirmationRequest.comment) &&
        Objects.equals(this.holder, hotelConfirmationRequest.holder) &&
        Objects.equals(this.payment, hotelConfirmationRequest.payment) &&
        Objects.equals(this.rooms, hotelConfirmationRequest.rooms) &&
        Objects.equals(this.extras, hotelConfirmationRequest.extras);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, arrivalTime, comment, holder, payment, rooms, extras);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelConfirmationRequest {\n");
    
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
