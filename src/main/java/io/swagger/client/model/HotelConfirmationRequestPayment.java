/*
 * Algebratec API
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * HotelConfirmationRequestPayment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-24T22:56:10.425Z[GMT]")
public class HotelConfirmationRequestPayment {
  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    CC("cc");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodEnum fromValue(String text) {
      for (MethodEnum b : MethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MethodEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("method")
  private MethodEnum method = null;

  @SerializedName("ccType")
  private String ccType = null;

  @SerializedName("ccNumber")
  private String ccNumber = null;

  @SerializedName("ccCode")
  private String ccCode = null;

  @SerializedName("ccEcpMonth")
  private String ccEcpMonth = null;

  @SerializedName("ccExpYear")
  private String ccExpYear = null;

  public HotelConfirmationRequestPayment method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @Schema(description = "")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public HotelConfirmationRequestPayment ccType(String ccType) {
    this.ccType = ccType;
    return this;
  }

   /**
   * Get ccType
   * @return ccType
  **/
  @Schema(description = "")
  public String getCcType() {
    return ccType;
  }

  public void setCcType(String ccType) {
    this.ccType = ccType;
  }

  public HotelConfirmationRequestPayment ccNumber(String ccNumber) {
    this.ccNumber = ccNumber;
    return this;
  }

   /**
   * Get ccNumber
   * @return ccNumber
  **/
  @Schema(description = "")
  public String getCcNumber() {
    return ccNumber;
  }

  public void setCcNumber(String ccNumber) {
    this.ccNumber = ccNumber;
  }

  public HotelConfirmationRequestPayment ccCode(String ccCode) {
    this.ccCode = ccCode;
    return this;
  }

   /**
   * Get ccCode
   * @return ccCode
  **/
  @Schema(description = "")
  public String getCcCode() {
    return ccCode;
  }

  public void setCcCode(String ccCode) {
    this.ccCode = ccCode;
  }

  public HotelConfirmationRequestPayment ccEcpMonth(String ccEcpMonth) {
    this.ccEcpMonth = ccEcpMonth;
    return this;
  }

   /**
   * Get ccEcpMonth
   * @return ccEcpMonth
  **/
  @Schema(description = "")
  public String getCcEcpMonth() {
    return ccEcpMonth;
  }

  public void setCcEcpMonth(String ccEcpMonth) {
    this.ccEcpMonth = ccEcpMonth;
  }

  public HotelConfirmationRequestPayment ccExpYear(String ccExpYear) {
    this.ccExpYear = ccExpYear;
    return this;
  }

   /**
   * Get ccExpYear
   * @return ccExpYear
  **/
  @Schema(description = "")
  public String getCcExpYear() {
    return ccExpYear;
  }

  public void setCcExpYear(String ccExpYear) {
    this.ccExpYear = ccExpYear;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelConfirmationRequestPayment hotelConfirmationRequestPayment = (HotelConfirmationRequestPayment) o;
    return Objects.equals(this.method, hotelConfirmationRequestPayment.method) &&
        Objects.equals(this.ccType, hotelConfirmationRequestPayment.ccType) &&
        Objects.equals(this.ccNumber, hotelConfirmationRequestPayment.ccNumber) &&
        Objects.equals(this.ccCode, hotelConfirmationRequestPayment.ccCode) &&
        Objects.equals(this.ccEcpMonth, hotelConfirmationRequestPayment.ccEcpMonth) &&
        Objects.equals(this.ccExpYear, hotelConfirmationRequestPayment.ccExpYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, ccType, ccNumber, ccCode, ccEcpMonth, ccExpYear);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelConfirmationRequestPayment {\n");
    
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    ccType: ").append(toIndentedString(ccType)).append("\n");
    sb.append("    ccNumber: ").append(toIndentedString(ccNumber)).append("\n");
    sb.append("    ccCode: ").append(toIndentedString(ccCode)).append("\n");
    sb.append("    ccEcpMonth: ").append(toIndentedString(ccEcpMonth)).append("\n");
    sb.append("    ccExpYear: ").append(toIndentedString(ccExpYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
