/*
 * Algebratec API
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HotelAvailabilityRequestFilter;
import io.swagger.client.model.HotelAvailabilityRequestGeolocation;
import io.swagger.client.model.HotelAvailabilityRequestOccupancies;
import io.swagger.client.model.HotelAvailabilityRequestStay;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * HotelAvailabilityRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-25T11:48:12.193Z[GMT]")
public class HotelAvailabilityRequest {
  /**
   * language for description, default is EN
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN("EN"),
    FR("FR"),
    AR("AR");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LanguageEnum fromValue(String text) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LanguageEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("language")
  private LanguageEnum language = null;

  @SerializedName("combination")
  private Boolean combination = null;

  @SerializedName("stay")
  private HotelAvailabilityRequestStay stay = null;

  @SerializedName("occupancies")
  private List<HotelAvailabilityRequestOccupancies> occupancies = null;

  @SerializedName("filter")
  private HotelAvailabilityRequestFilter filter = null;

  @SerializedName("geolocation")
  private HotelAvailabilityRequestGeolocation geolocation = null;

  public HotelAvailabilityRequest language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * language for description, default is EN
   * @return language
  **/
  @Schema(description = "language for description, default is EN")
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public HotelAvailabilityRequest combination(Boolean combination) {
    this.combination = combination;
    return this;
  }

   /**
   * Get combination
   * @return combination
  **/
  @Schema(description = "")
  public Boolean isCombination() {
    return combination;
  }

  public void setCombination(Boolean combination) {
    this.combination = combination;
  }

  public HotelAvailabilityRequest stay(HotelAvailabilityRequestStay stay) {
    this.stay = stay;
    return this;
  }

   /**
   * Get stay
   * @return stay
  **/
  @Schema(description = "")
  public HotelAvailabilityRequestStay getStay() {
    return stay;
  }

  public void setStay(HotelAvailabilityRequestStay stay) {
    this.stay = stay;
  }

  public HotelAvailabilityRequest occupancies(List<HotelAvailabilityRequestOccupancies> occupancies) {
    this.occupancies = occupancies;
    return this;
  }

  public HotelAvailabilityRequest addOccupanciesItem(HotelAvailabilityRequestOccupancies occupanciesItem) {
    if (this.occupancies == null) {
      this.occupancies = new ArrayList<HotelAvailabilityRequestOccupancies>();
    }
    this.occupancies.add(occupanciesItem);
    return this;
  }

   /**
   * Get occupancies
   * @return occupancies
  **/
  @Schema(description = "")
  public List<HotelAvailabilityRequestOccupancies> getOccupancies() {
    return occupancies;
  }

  public void setOccupancies(List<HotelAvailabilityRequestOccupancies> occupancies) {
    this.occupancies = occupancies;
  }

  public HotelAvailabilityRequest filter(HotelAvailabilityRequestFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(description = "")
  public HotelAvailabilityRequestFilter getFilter() {
    return filter;
  }

  public void setFilter(HotelAvailabilityRequestFilter filter) {
    this.filter = filter;
  }

  public HotelAvailabilityRequest geolocation(HotelAvailabilityRequestGeolocation geolocation) {
    this.geolocation = geolocation;
    return this;
  }

   /**
   * Get geolocation
   * @return geolocation
  **/
  @Schema(description = "")
  public HotelAvailabilityRequestGeolocation getGeolocation() {
    return geolocation;
  }

  public void setGeolocation(HotelAvailabilityRequestGeolocation geolocation) {
    this.geolocation = geolocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelAvailabilityRequest hotelAvailabilityRequest = (HotelAvailabilityRequest) o;
    return Objects.equals(this.language, hotelAvailabilityRequest.language) &&
        Objects.equals(this.combination, hotelAvailabilityRequest.combination) &&
        Objects.equals(this.stay, hotelAvailabilityRequest.stay) &&
        Objects.equals(this.occupancies, hotelAvailabilityRequest.occupancies) &&
        Objects.equals(this.filter, hotelAvailabilityRequest.filter) &&
        Objects.equals(this.geolocation, hotelAvailabilityRequest.geolocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, combination, stay, occupancies, filter, geolocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelAvailabilityRequest {\n");
    
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    combination: ").append(toIndentedString(combination)).append("\n");
    sb.append("    stay: ").append(toIndentedString(stay)).append("\n");
    sb.append("    occupancies: ").append(toIndentedString(occupancies)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    geolocation: ").append(toIndentedString(geolocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
